%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 13.0.0
%%For: (\700\744\754\750\755\750\761\762\760\740\762\756\760) ()
%%Title: (207\766.eps)
%%CreationDate: 9/20/2008 12:57 AM
%%BoundingBox: -183 -401 983 1001
%%HiResBoundingBox: -182.501 -400.1602 982.5605 1000.0801
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%CMYKProcessColor: 1 1 1 1 ([Registration])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 1 0 () 
%AI3_Cropmarks: -182.48 -400.0801 982.4805 1000.0801
%AI3_TemplateBox: 400.5 299.5 400.5 299.5
%AI3_TileBox: 94 -96 706 696
%AI3_DocumentPreview: Header
%AI5_ArtSize: 800 600
%AI5_RulerUnits: 6
%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI8_OpenToView: 45 602 1 735 654 26 0 0 67 80 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:0 0
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI12_CMSettings: 00.MS
%AI7_Thumbnail: 108 128 8
%%BeginData: 9138 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FDFCFFFDFCFFFDFCFFFDB9FFA8A87DFD67FFA82727202752FD66FF
%522720272727A8FD65FF53F827F827F87DFD65FF59FD0627FD64FF592720
%27F8272027A8FD60FFA87D272720272727202727FD5EFFA87D2727F827F8
%27F827F827F827A8FD58FFA8FFFFA852FD052752A8FFA8FD0527FD58FF28
%2727522027F827527DA8FD04FF52202727A8FD56FF7D202727272027277D
%A8FD08FFA8A8FD56FFA87D2027F827F827F8A8FD60FFA852FD0927FD60FF
%7D2027F8272027F82720277DFD60FF522727275259272720277DFD61FFA8
%F82752FF5227F82727FD64FFA8FFFF522727277DFD66FF7DF82720277DFD
%65FFA82727202727FD66FF2727F827F827A8FD64FF7DFD052752FD65FF52
%F8272027F87DFD63FFA87D2727202727277DFFFFA87DA8FD5EFF52F827F8
%27F827F8527D52F827F8277DFD5CFF52FD0F277DFD5BFF52F8272027F827
%2027F8272027F8272027A8FD5AFF52272027272720272727202727272027
%27A8FD5AFF7DF827F827F827F827F827F827F827F8277DFD5CFFFD0F27A8
%FD5CFF52F8272027F8272027F8272027F853FD5DFF7D2720272727202727
%27202727277DFD5DFFA8F827F827F827F827F827F827F82752FD5DFF52FD
%0F277DFD5BFF7D27F8272027F8272027F8272027F8277DFD5CFF7D272027
%272720272727202727272052FD5DFF5227F827F827F827F827F827F827F8
%7DFD5DFF52FD0E27A8FD5CFFA8F8272027F8272027F8272027F82727FD5D
%FF52202727272027272720FD052752FD5CFF5927F827F827F827F827F827
%F827F8277DFD5BFFA8FD0F2752FD5BFF5227F8272027F8272027F8272027
%F827207DFD5AFF522727202727272027272720272727202752FD5AFF5227
%F827F827F827F827F827F827F827F852FD5BFFFD1127FD5BFF7D2027F827
%2027F8272027F8272027F827A8FD5AFF7D27272720272727202727272027
%272720A8FD59FFA827F827F827F827F827F827F827F827F8277DFD59FF52
%FD1127A8FD57FF7D272027F8272027F8272027F8272027F827202752FD56
%FFA8272027272720272727202727272027272720272727A8FD54FF7D52F8
%27F827F827F827F827F827F827F827F827F827F827A8FD52FF52FD172752
%FD50FFA87D2727F8272027F8272027F8272027F8272027F8272027F82720
%527DFD4CFFA8A87D27202727272027272720272727202727272027272720
%27272720272727207DFD49FF5227F827F827F827F827F827F827F827F827
%F827F827F827F827F827F827F8277D52F8A8FD41FF7DA8FFFFA87EFD0E27
%7DA852FD1127527DA8FD3CFFA8A8A8FF522752FF5227F8272027F8FD0827
%7DA8FFFFFF2727F8272027F8272027F8272027F827275227FD37FFA827A8
%FF7DFD07277D522727272027277DA8FFFFFFAFFD07FFA827272720272727
%20272727202727272027525252FD35FF7DF827277E2727F827F827F827F8
%27F827F827F827527D527DFD09FF7DF827F827F827F827F827F827F827F8
%27F8275227A8FD34FF52FD08277D7D7E7DA87DFD05272852272727FD09FF
%52FD122752A8FD35FF7D2027F827A8A852A8FD06FFA8A8A87DA8FFFFFFA8
%AFFD08FFA827F8272027F8272027F8272027F8272027F82720A8FD2BFF7E
%7D597D527D527D527D52FD0427FD1CFF5227272027272720272727202727
%2720272727202753FD2AFF5227F827F827F827F827F827F827F82721FD0B
%27F8FD0427527DFD08FF7DF827F827F827F827F827F827F827F827F827F8
%27F827A8FD29FF52FD212752FD08FFFD162752FD2AFF27272027F8272027
%F8272027F8272027F8272027F8272027F8272027F8272027F82720A8FD06
%FF7D27F8272027F8272027F8272027F8272027F827202727FD2BFF522027
%272720272727202727272027272720272727202727272027272720272727
%2027A8FD05FFA84C27272027272720272727202727272027272720272727
%FD2BFF2727F827F827F827F827F827F827F827F827F827F827F827F827F8
%27F827F827F827F8A8FD05FF7DF827F827F827F827F827F827F827F827F8
%27F827F82752FD2BFFFD2327A8FD05FFFD17277DFD2AFFA82727F8272027
%F8272027F8272027F8272027F8272027F8272027F8272027F8272027F8FD
%05FF7D27F8272027F8272027F8272027F8272027F8272027F82727A8FD29
%FFA827272720272727202727272027272720272727202727272027272720
%27272720272727AFFD04FF53272720272727202727272027272720272727
%2027272720277DFD29FFA8F827F827F827F827F827F827F827F827F827F8
%27F827F827F827F827F827F827F82727FD04FFA8F827F827F827F827F827
%F827F827F827F827F827F827F827F852FD29FF7DFD222752FD04FF7DFD1A
%27A8FD28FF7DF8272027F8272027F8272027F8272027F8272027F8272027
%F8272027F8272027F82727FD04FF52F8272027F8272027F8272027F82720
%27F8272027F8272027F8277DFD28FF7D2720272727202727272027272720
%27272720272727202727272027272720272727207DFD04FF272720272727
%2027272720272727202727272027272720272727207DFD28FF7DF827F827
%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827
%7DFFFFFF7D27F827F827F827F827F827F827F827F827F827F827F827F827
%F82752FD28FFA87DFD1F277D7DFD04FFA8FD1B2752FD2BFFA8A87D7D5352
%2027F8272027F8272027F8272027F8272027F852527D84FD07FF52272027
%F8272027F8272027F8272027F8272027F8272027F827202727FD31FF7D27
%2720272727202727272027272720272752FD0BFF52202727272027272720
%272727202727272027272720272727202727277DFD30FF7D27F827F827F8
%27F827F827F827F827F82752FD0BFF2727F827F827F827F827F827F827F8
%27F827F8272727F827F827F827F852FD29FFFD06A87DFD142752527DA8FD
%05FFA8FD1427527DFD0827A8FD27FF27272027F8272027F8272027F82720
%27F8272027F8272027F8272027F82720277DFD04FFA82027F8272027F827
%2027F8272027F827202720527DFF27272027F827202727FD26FF7D272027
%272720272727202727272027272720272727202727272027272720272784
%FD04FF7D272727202727272027272720272727202752FD04FF8420272727
%202727277DFD25FF7DF827F827F827F827F827F827F827F827F827F827F8
%27F827F827F827F827F82753FD04FF52F827F827F827F827F827F827F827
%F827F87DFD04FFA827F827F827F827F827A8FD24FF53FD20277DFD04FFFD
%12277DFD05FF52FD08277DFD24FF7D2027F8272027F8272027F8272027F8
%272027F8272027F8272027F8272027F82752FFFFFF5227F8272027F82752
%7DF8272027F8272027F8AFFD06FF52272027F827202727FD24FF52272727
%202727272027272720272727202727272027272720272727202727272052
%FFFFFF7E2727202727277EFFA8272027272720272752FD08FF7D27272720
%2727277DFD23FF52F827F827F827F827F827F827F827F827F827F827F827
%F827F827F827F827F827F8A9FFFFA827F827F82752FFFFA8F827F827F827
%F82752FD09FF5227F827F827F852FD23FF52FD2127A8FFFFFF52FD0427A8
%FFFFFFFD0827A8FD0AFFFD0727FD23FF52F8272027F8272027F8272027F8
%272027F8272027F8272027F8272027F8272027F87DFFFFFF7D2027F852FD
%04FF5227F8272027F827A8FD0AFF7D2027F82720277DFD22FF5227202727
%272027272720272727202727272027272720272727202727272027272752
%FFFFFFA8272727A8FD04FF7D272720FD0427FD0BFFA827272720272752FD
%22FF52F827F827F827F827F827F827F827F827F827F827F827F827F827F8
%27F827F827F852FD04FF272752FD05FF2727F827F827F87DFD0CFF2127F8
%27F827F8A8FD21FF52FD212752FD04FF7D27FD06FFFD072752FD0CFF7DFD
%0627A8FD21FF7D2027F8272027F8272027F8272027F8272027F8272027F8
%272027F8272027F8272052FD04FFA8AFFD05FFA8F8272027F8272052FD0C
%FFA8282027F82727FD22FF7D272727202727272027272720272727202727
%27202727272027272720272727202727FD0BFF7D2720272727202752FD0D
%FF7D2727272052FD22FF7DF827F827F827F827F827F827F827F827F827F8
%27F827F827F827F827F827F827F827A8FD0AFF7DF827F827F827F87DFD0C
%FF7D27F827F827F8A8FD21FFA8FD2227AFFD0AFFFD072752FD0DFF52FD06
%277DFD21FF7DF8272027F8272027F8272027F8272027F8272027F8272027
%F8272027F8272027F8277DFD09FFA8272027F827202752FD0DFFA8522727
%2027F87DFD21FF7D27202727272027272720272727202727272027272720
%272727202727272027272720A8FD08FFA852202727272027277DFD10FFA8
%522752A8FD21FF52F827F827F827F827F827F827F827F827F827F827F827
%F827F827F827F827F827F8277DFD05FFA8A87D27F827F827F827F852A8FD
%11FFA8FD24FF52FD2227A8FD04FFFD0C27A8FD37FF522027F8272027F827
%2027F8272027F8272027F8272027F8272027F8272027F827202728FFFFFF
%A8522027F8272027F8272027F8A8FD37FFFD042720272727202727272027
%27272027272720272727202727272027272720272727A8FD04FF7D272720
%27272720272752FD38FF28F827F827F827F827F827F827F827F827F827F8
%27F827F827F827F827F827F827F827F852FD05FFA8527D59A85227F852A8
%FD38FF52FD2427FD0BFFA8A8FD3BFF52522027F8272027F8272027F82720
%27F8272027F8272027F8272027F8272027F8527DA8FD4AFFA82727202727
%272027272720272727202727272027272720272727202752A8FD4EFFA827
%27F827F827F827F827F827F827F827F827F827F827F827277DA8FD52FFA8
%A85952FD11277DA8FD5AFFA8A87DA87DA87D7D7DA87EA87DA8A8FDFCFFFD
%FCFFFDFCFFFDFCFFFD86FFFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade false put
userdict /_aicmykps true put
userdict /_forceToCMYK true put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI3_BeginRider
currentpacking true setpacking
setpacking
%AI3_EndRider
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends.aip)
%AI8_PluginGroupInfo
(Adobe Symbolism) (Adobe Symbolism) (Symbolism.aip)
%AI8_PluginGroupInfo
(Adobe Tracing Object) (Tracing) (TracingSuite.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Flare Plugin) (Flare) (flare.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Pathfinder Suite) (Adobe Compound Shape) (PathFinder Suite.aip)
%AI8_PluginGroupInfo
(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)
%AI8_PluginGroupInfo
(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 ([Registration]) 0 Xs
([Registration])
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 1 255 79 79 0 50 Lb
(207\366\240Image) Ln
0 A
u
u
0 O
0 g
0 J 0 j 1 w 4 M []0 d1 XR
740.5596 173.5205 m
745.4229 163.3477 749.7324 151.748 753.5195 139.4404 c
757.1357 127.6875 763.626 116.1953 765.5195 104.8799 c
768.2227 88.7334 766.0137 75.373 770.3203 63.1201 c
784.0146 24.1514 811.998 -4.88965 822.6396 -47.7598 c
826.8047 -64.5371 838.3467 -81.2754 839.4404 -100.5596 C
838.2568 -102.417 834.2139 -101.4141 833.6797 -103.9199 C
833.3145 -108.4551 837.9063 -112.0879 837.5195 -115.9199 c
837.209 -119.0059 834.6152 -118.8799 833.6797 -122.1602 C
836.958 -129.6777 841.0732 -138.8145 841.8398 -147.5996 c
843.667 -168.5244 821.1846 -174.9971 801.04 -169.2002 C
800.2529 -166.4668 800.6377 -162.5625 798.6396 -161.04 C
788.002 -161.0371 776.9453 -160.8301 769.3604 -156.2402 c
765.5391 -153.9277 757.2461 -147.2969 756.8799 -143.2803 c
756.0713 -134.415 771.4551 -129.6465 775.5996 -124.5596 C
772.0352 -113.9248 763.5889 -105.3096 758.7998 -93.3604 c
755.5508 -85.252 755.5889 -76.0723 752.0801 -68.3994 c
748.3965 -60.3467 740.5254 -56.3398 742 -43.4395 C
728.8906 -35.9092 720.5322 -23.6279 707.4404 -16.0801 C
699.6445 3.96484 694.5635 26.7236 681.04 41.04 C
681.2715 32.8086 680.2656 25.8145 678.1602 19.9199 C
668.5195 17.2402 658.374 15.0664 647.9199 13.2002 C
644.332 -9.94434 637.5811 -32.8457 631.5996 -54.4795 c
628.0625 -67.2764 630.1504 -78.998 622 -86.6396 C
624.0928 -92.5332 623.8779 -99.0938 624.4004 -105.8398 c
624.9053 -112.3584 626.6826 -120.1113 625.8398 -126 c
625.0635 -131.4238 617.7441 -136.4297 615.7598 -141.8398 c
611.6914 -152.9316 613.0693 -163.8076 609.5195 -174.96 C
604.3193 -178.3994 598.7148 -181.4355 594.1602 -185.5195 C
595.7393 -190.1191 601.5166 -192.7393 601.3604 -198 c
601.2041 -203.2412 590.4971 -215.3975 586.96 -218.6396 c
576.4209 -228.3018 558.6807 -233.0166 545.2002 -225.3604 C
545.1445 -222.0557 544.6436 -219.1963 544.2402 -216.2402 C
532.1094 -219.0293 520.1436 -221.2441 503.9199 -221.5195 c
492.4121 -221.7158 484.248 -216.0068 477.04 -210 c
470.8975 -204.8809 463.666 -199.793 461.2002 -194.1602 c
458.1113 -187.1055 460.9775 -182.8525 466.4805 -179.7598 C
481.9121 -178.124 496.1611 -179.4414 505.8398 -174.4795 c
508.3496 -173.1934 509.9209 -169.7988 512.5596 -167.7598 c
515.374 -165.5859 518.8682 -164.7881 520.7197 -162.4795 c
525.2998 -156.7725 527.7822 -145.8486 530.3203 -136.0801 c
532.9238 -126.0547 536.1133 -115.7695 538 -107.7598 c
540.1748 -98.5254 536.5371 -80.6963 545.2002 -77.04 C
542.1436 -72.1113 540.9434 -66.0938 539.4404 -59.7598 c
538.0605 -53.9473 535.2461 -47.6367 534.6396 -41.5195 c
533.9902 -34.96 537.3135 -28.0264 534.6396 -21.3604 C
531.7988 -21.7559 530.3545 -24.0469 527.4404 -25.2002 c
522.6943 -27.0771 517.0723 -27.499 513.5195 -30 c
507.8613 -33.9834 503.876 -44.4951 500.5596 -51.5996 c
496.7031 -59.8652 493.418 -68.3623 490 -75.1201 c
481.668 -91.5928 469.4414 -102.0801 461.6797 -115.4395 C
456.959 -112.2988 456.3516 -105.9707 455.4404 -101.04 c
454.3887 -95.3564 454.0107 -89.3887 452.0801 -83.7598 c
448.6006 -73.6133 443.6025 -63.1045 441.5195 -53.04 c
440.9551 -50.3076 441.5811 -47.4824 441.04 -44.8799 c
439.6123 -38.0127 433.3271 -36.4043 433.8398 -27.1201 c
434.3223 -18.3877 439.6797 -11.1475 442.4805 -2.63965 c
445.3652 6.12305 448.2568 15.9424 449.6797 23.2803 c
450.3145 26.5508 449.7422 29.7148 450.1602 32.4004 c
451.3486 40.0361 453.6094 47.4482 454.4805 55.4404 c
455.3535 63.459 457.1016 71.2998 457.8398 79.4404 c
458.0879 82.1689 457.499 84.8838 457.8398 87.5996 c
458.751 94.8477 462.5342 102.6973 465.04 110.1602 c
472.4063 132.1016 480.166 154.8545 489.5195 174.96 c
498.8213 194.9531 509.6426 214.123 520.7197 233.04 c
524.4043 239.332 528.7305 245.542 531.2803 251.7598 c
536.2217 263.8125 537.2715 277.4443 540.8799 289.2002 C
538.4805 291.7109 535.2412 290.1367 531.7598 291.1201 c
527.5967 292.2959 527.0283 295.7568 524.0801 296.4004 c
519.3672 297.4287 511.3682 293.2881 507.2803 291.1201 c
502.4971 288.583 497.7842 285.2568 493.3604 283.4404 c
461.6826 270.4316 403.9248 286.3584 382 263.7598 C
389.3867 262.876 395.731 263.2803 403.5996 263.2803 c
410.168 263.2803 420.2998 265.0137 425.2002 262.7998 c
432.7676 259.3818 429.8105 241.9668 421.3604 241.2002 c
417.3906 240.8398 415.7285 244.0908 412.2402 245.04 c
401.0967 248.0723 385.5386 244.2559 373.3599 246.4805 C
371.6519 239.9336 353.3857 231.2246 350.7998 242.6396 C
348.6533 238.7324 341.2588 237.9521 338.3198 243.1201 C
326.4307 234.8809 318.2358 250.8135 309.52 252.2402 c
302.4858 253.3906 294.1094 250.4971 286.96 250.3203 c
279.5791 250.1377 269.665 252.6787 263.4399 251.2803 c
258.2705 250.1182 252.3276 241.8926 247.6001 239.7598 c
237.1626 235.0527 228.2666 239.5547 219.2798 244.5605 C
217.7256 243.875 216.0073 243.3525 214 243.1201 C
211.8237 237.8643 210.7192 229.5752 213.52 224.4004 C
246.3159 224.4004 281.3936 224.4004 315.7598 224.4004 c
349.5703 224.4004 385.2607 226.7178 413.6797 220.0801 C
413.8721 210.6016 420.8701 202.2148 421.8398 193.2002 c
422.4141 187.8672 421.7217 180.0557 421.3604 173.5205 c
420.5186 158.3262 420.7334 139.2637 419.4404 121.6797 c
418.4033 107.5791 416.7422 83.8926 409.3604 78 c
405.2803 74.7441 397.897 74.4541 391.6001 73.2002 c
373.6016 69.6143 358.4019 60.8467 337.3599 60.7197 C
332.7139 56.4063 329.4146 50.7451 325.3599 45.8398 C
331.4297 37.79 345.0894 37.0273 358.96 34.7998 c
370.168 33 387.4272 31.3213 390.6401 22.3203 c
391.5713 19.71 390.7905 15.8799 391.1201 11.2803 c
391.6167 4.34375 393.8638 -2.91895 394.48 -10.3203 c
396.4136 -33.542 401.4932 -52.6406 404.0801 -75.5996 c
406.583 -97.8105 407.7646 -121.1406 410.7998 -143.7598 c
411.8076 -151.2715 413.9941 -159.1299 413.6797 -165.3604 c
413.4746 -169.4424 411.3848 -172.3652 411.2803 -175.9199 c
410.9893 -185.7549 417.6182 -196.7852 421.3604 -205.2002 c
423.0947 -209.1006 424.7959 -213.7002 427.1201 -219.1201 c
428.7686 -222.9639 433.2559 -229.0684 432.4004 -233.04 c
431.3779 -237.7842 419.9307 -239.8086 413.2002 -242.6396 c
393.3652 -250.9844 371.042 -259.7451 352.2402 -267.1201 c
345.3857 -269.8086 338.2192 -272.3096 331.1201 -274.7998 c
324.0703 -277.2725 316.4448 -280.1797 309.52 -281.5195 c
293.1069 -284.6953 274.1445 -282.3779 254.7998 -283.9199 c
245.1631 -284.6885 235.9731 -285.8408 226 -285.8398 c
216.686 -285.8389 207.6597 -284.6348 197.6802 -283.9199 c
186.3442 -283.1074 174.5693 -284.7402 163.1201 -283.9199 c
142.6611 -282.4541 123.2095 -276.877 102.6401 -273.3604 c
95.2935 -272.1035 87.4868 -271.748 82.96 -269.5195 c
76.3013 -266.2422 72.9014 -257.7803 66.6401 -253.2002 c
54.2153 -244.1113 34.6016 -245.1055 26.3198 -232.5596 C
26.3931 -208.6299 26.2363 -185.665 29.2002 -164.4004 c
30.1938 -157.2705 32.4712 -150.791 32.5601 -144.2402 c
32.728 -131.8535 28.498 -119.626 27.7603 -105.8398 c
26.2749 -78.0957 27.1421 -49.2373 28.2402 -19.9199 c
28.6973 -7.70508 28.229 9.73633 33.04 18.4805 c
40.3984 31.8545 69.1826 30.4805 91.6001 30.4805 c
99.2275 30.4805 108.5508 29.085 115.1201 30.4805 c
118.626 31.2246 132.5298 40.043 132.8799 44.4004 c
133.4087 50.9727 121.2676 57.4063 119.4399 62.6396 C
87.7915 64.9121 56.6938 67.7334 32.0801 77.04 C
26.8975 92.5205 31.2544 109.584 33.04 126.4805 c
33.9731 135.3086 33.6021 144.3086 34 153.3604 c
34.3647 161.6563 36.3003 169.873 36.8799 177.8398 c
38.0332 193.6826 34.4341 211.3545 40.7202 224.4004 C
54.5273 229.0332 73.231 230.6396 92.5601 230.6396 c
115.7485 230.6406 141.4292 232.2676 160.2402 229.2002 C
162.5347 241.3701 156.6763 254.6943 161.2002 264.2402 c
165.1348 272.543 181.3589 273.3184 187.6001 280.0801 C
194.6074 275.5674 198.459 267.8994 202 259.9199 C
206.1719 260.3877 209.1514 262.0488 213.52 262.3203 C
212.7866 266.707 208.9648 268.0049 208.2402 272.4004 C
219.2915 277.2109 234.4761 281.3643 252.3999 280.0801 c
256.4883 279.7871 261.3931 277.7988 265.8398 278.1602 c
272.7539 278.7217 278.6392 284.4346 284.5601 287.7598 c
289.4971 290.5332 298.4829 296.5742 304.2402 295.9199 c
307.4277 295.5586 312.5859 290.0752 312.3999 286.3203 c
312.0098 278.4414 301.0771 277.8018 294.1602 274.3203 C
298.7041 271.9854 306.812 274.0527 312.3999 273.8398 C
320.4063 287.4736 337.0928 289.5146 353.2002 297.3604 c
356.9146 299.1694 361.7822 302.6411 366.1602 305.52 c
370.5596 308.4131 375.1821 312.9033 378.6401 313.6802 c
381.3101 314.2803 384.6792 313.3784 387.2798 313.6802 c
395.313 314.6118 403.4746 318.6084 410.7998 321.3604 c
433.208 329.7773 449.2051 345.9175 471.7598 354 C
467.5088 366.0801 477.2158 371.8979 485.6797 375.1201 c
487.7236 375.8984 490.6641 375.936 492.4004 377.04 c
494.0869 378.1123 495.4541 381.6689 497.2002 384.2402 c
498.8945 386.7358 500.8867 389.0503 502.4805 390.96 c
506.042 395.229 512.1152 399.8486 513.04 403.9199 c
515.7012 415.6318 504.9355 422.7144 501.5195 431.2803 c
498.2119 439.5767 499.4277 446.6499 495.7598 455.2803 C
496.8945 457.3452 500.0508 457.3896 501.5195 459.1201 C
503.1953 496.397 485.2734 514.3169 468.4004 534 c
463.0166 540.2803 456.5977 547.21 453.04 554.1602 c
445.6729 568.5537 446.334 589.5469 438.1602 605.04 C
433.2031 606.8027 426.5342 606.8545 421.3604 608.3999 C
421.1318 618.0723 421.4609 627.5713 421.8398 637.6802 c
422.1201 645.1689 420.2559 660.292 424.2402 665.04 c
426.9424 668.2607 433.4658 666.5391 437.2002 668.8799 c
439.3809 670.2476 442.7646 679.0044 444.4004 682.8003 c
449.0273 693.5391 451.8867 702.3105 458.7998 710.6401 c
461.8174 714.2754 465.8809 717.6167 468.4004 721.6802 c
474.043 730.7832 476.3027 743.1221 479.9199 753.8398 C
472.2402 752.3154 467 747.7007 460.7197 743.2803 c
455.251 739.4307 448.0703 733.5386 440.0801 734.1602 c
430.1914 734.9292 420.3154 748.8721 421.3604 760.5601 c
421.7861 765.3271 424.625 768.9028 426.6396 773.04 C
429.2998 772.9473 431.5781 773.9932 433.8398 774.96 c
446.7012 780.458 459.8193 784.8784 473.6797 788.8799 C
473.5811 794.0298 474.5137 799.6445 478 801.8398 c
480.1504 803.1943 483.8203 802.873 486.6396 803.7603 c
494.9004 806.3584 500.292 815.3018 507.7598 816.2402 c
509.6494 816.4775 511.4082 815.2734 514 815.2803 c
516.7363 815.2871 519.6924 817.3633 522.1602 817.2002 c
525.2939 816.9932 527.4668 812.9941 530.7998 812.8799 c
533.8184 812.7764 540.5566 817.1338 544.7197 818.6401 c
578.7666 830.96 611.4395 842.5786 641.6797 858 C
643.3994 869.6777 637.5732 880.4092 639.7598 892.5601 C
643.6367 895.5752 649.3916 899.876 655.1201 902.1602 c
658.6367 903.5625 663.1074 905.3911 666.6396 906 c
675.5732 907.54 690.874 906.9814 695.9199 903.1201 c
700.1807 899.8599 702.8916 889.2949 705.5195 883.4399 c
707.0176 880.103 708.8457 876.6797 710.3203 873.3604 c
711.7529 870.1323 714.1133 866.0288 714.6396 863.2803 c
716.7432 852.3052 714.2744 839.6641 715.5996 828.2402 c
716.0322 824.5137 717.3789 820.606 717.04 818.1602 c
716.4092 813.6128 704.8965 802.7349 700.2402 801.3604 c
696.5703 800.2764 690.8643 800.7378 686.3203 800.3999 c
681.8789 800.0698 675.7969 798.9775 672.8799 799.4399 c
667.3252 800.3213 662.3418 807.5801 659.4404 811.4399 c
655.2754 816.9795 652.8721 821.3369 649.3604 826.3203 C
618.8438 812.5156 581.6836 805.3564 553.8398 788.8799 C
552.8984 779.4194 552.5313 770.6855 546.6396 764.8799 c
543.9336 762.2134 539.5391 761.8765 536.5596 759.1201 c
532.1689 755.0571 528.6348 742.4497 526.4805 735.6001 c
523.5684 726.3438 520.4668 718.3174 518.7998 709.6802 c
518.1504 706.313 518.7422 702.5132 518.3203 699.1201 c
517.7148 694.2559 515.9766 688.3936 514.96 682.8003 c
512.6855 670.2798 511.2773 661.8643 518.7998 654 C
525.4502 655.7813 530.9873 658.8945 537.04 661.6802 c
542.4805 664.1841 549.5381 668.1865 556.2402 667.9199 c
559.3604 667.7959 564.1377 665.3418 568.7197 664.0801 c
574.1982 662.5713 579.5098 662.0776 582.6396 660.7202 c
595.0068 655.3574 608.9092 632.1743 610.4805 616.0801 c
612.2979 597.4473 600.8164 589.064 596.0801 575.7603 C
600.1621 574.104 603.2871 576.3379 607.1201 575.2803 c
610.3828 574.3799 612.333 569.6123 615.2803 567.6001 c
620.9258 563.7451 627.8467 563.4326 635.4404 560.8799 C
635.1289 554.311 631.7793 550.7803 629.6797 546 C
640.3955 533.5776 650.2422 516.8745 661.3604 501.3599 c
666.041 494.8276 671.4141 486.9282 676.7197 478.3203 c
681.7305 470.1919 687.7803 460.9395 689.2002 452.8799 c
689.5938 450.6416 688.96 447.9761 689.2002 445.6802 c
690.4414 433.7881 694.4424 419.7588 695.4404 405.8398 c
696.1709 395.6411 694.3389 385.146 696.8799 377.04 c
698.6602 371.3604 703.4814 365.4077 707.4404 359.7603 c
710.5313 355.3501 717.7363 347.1631 716.5596 341.52 c
715.5078 336.4736 707.2471 335.9004 704.0801 331.9199 C
721.6025 326.5625 740.3086 322.3887 751.5996 310.8003 C
750.0938 305.3086 752.2871 299.7539 752.0801 294 C
734.8262 295.1465 728.1162 306.8359 714.6396 311.7603 C
717.4141 301.0737 729.5674 300.7891 738.1602 295.4404 c
744.6445 291.4033 748.4297 282.501 752.0801 275.7598 c
755.9463 268.6201 763.2705 262.7559 762.6396 254.1602 C
758.9521 252.4072 754.4248 251.4961 749.6797 250.7998 C
743.3633 264.3232 736.9951 277.7959 726.1602 286.7998 C
725.7715 286.8916 725.6816 287.2813 725.2002 287.2803 C
729.5215 279.1123 736.7227 272.8662 741.04 265.2002 c
748.3721 252.1816 749.3516 237.5176 756.8799 224.8799 c
759.1465 221.0752 763.1631 215.873 762.1602 211.4404 c
761.4746 208.4141 756.2178 206.1611 753.04 202.7998 c
750.7051 200.3301 746.3848 195.4209 746.3203 192.2402 c
746.2188 187.2559 751.625 183.9648 750.1602 179.7598 c
748.8945 176.1279 743.4678 175.5215 740.5596 173.5205 C
f
*u
1 g
-182 1000.0801 m
206.186 1000.0801 594.2852 1000.0801 982.4805 1000.0801 C
982.1602 533.4736 983.1201 65.7432 982 -400.0801 C
593.9893 -399.7598 204.7231 -400.7197 -182.48 -399.5996 C
-182.48 66.4395 -182.48 532.6191 -182.48 998.6401 C
-182.521 999.3213 -182.5591 999.9995 -182 1000.0801 C
f
1 D
750.1602 179.7598 m
751.625 183.9648 746.2188 187.2559 746.3203 192.2402 c
746.3848 195.4209 750.7051 200.3301 753.04 202.7998 c
756.2178 206.1611 761.4746 208.4141 762.1602 211.4404 c
763.1631 215.873 759.1465 221.0752 756.8799 224.8799 c
749.3516 237.5176 748.3721 252.1816 741.04 265.2002 c
736.7227 272.8662 729.5215 279.1123 725.2002 287.2803 C
725.6816 287.2813 725.7715 286.8916 726.1602 286.7998 C
736.9951 277.7959 743.3633 264.3232 749.6797 250.7998 C
754.4248 251.4961 758.9521 252.4072 762.6396 254.1602 C
763.2705 262.7559 755.9463 268.6201 752.0801 275.7598 c
748.4297 282.501 744.6445 291.4033 738.1602 295.4404 c
729.5674 300.7891 717.4141 301.0737 714.6396 311.7603 C
728.1162 306.8359 734.8262 295.1465 752.0801 294 C
752.2871 299.7539 750.0938 305.3086 751.5996 310.8003 C
740.3086 322.3887 721.6025 326.5625 704.0801 331.9199 C
707.2471 335.9004 715.5078 336.4736 716.5596 341.52 c
717.7363 347.1631 710.5313 355.3501 707.4404 359.7603 c
703.4814 365.4077 698.6602 371.3604 696.8799 377.04 c
694.3389 385.146 696.1709 395.6411 695.4404 405.8398 c
694.4424 419.7588 690.4414 433.7881 689.2002 445.6802 c
688.96 447.9761 689.5938 450.6416 689.2002 452.8799 c
687.7803 460.9395 681.7305 470.1919 676.7197 478.3203 c
671.4141 486.9282 666.041 494.8276 661.3604 501.3599 c
650.2422 516.8745 640.3955 533.5776 629.6797 546 C
631.7793 550.7803 635.1289 554.311 635.4404 560.8799 C
627.8467 563.4326 620.9258 563.7451 615.2803 567.6001 c
612.333 569.6123 610.3828 574.3799 607.1201 575.2803 c
603.2871 576.3379 600.1621 574.104 596.0801 575.7603 C
600.8164 589.064 612.2979 597.4473 610.4805 616.0801 c
608.9092 632.1743 595.0068 655.3574 582.6396 660.7202 c
579.5098 662.0776 574.1982 662.5713 568.7197 664.0801 c
564.1377 665.3418 559.3604 667.7959 556.2402 667.9199 c
549.5381 668.1865 542.4805 664.1841 537.04 661.6802 c
530.9873 658.8945 525.4502 655.7813 518.7998 654 C
511.2773 661.8643 512.6855 670.2798 514.96 682.8003 c
515.9766 688.3936 517.7148 694.2559 518.3203 699.1201 c
518.7422 702.5132 518.1504 706.313 518.7998 709.6802 c
520.4668 718.3174 523.5684 726.3438 526.4805 735.6001 c
528.6348 742.4497 532.1689 755.0571 536.5596 759.1201 c
539.5391 761.8765 543.9336 762.2134 546.6396 764.8799 c
552.5313 770.6855 552.8984 779.4194 553.8398 788.8799 C
581.6836 805.3564 618.8438 812.5156 649.3604 826.3203 C
652.8721 821.3369 655.2754 816.9795 659.4404 811.4399 c
662.3418 807.5801 667.3252 800.3213 672.8799 799.4399 c
675.7969 798.9775 681.8789 800.0698 686.3203 800.3999 c
690.8643 800.7378 696.5703 800.2764 700.2402 801.3604 c
704.8965 802.7349 716.4092 813.6128 717.04 818.1602 c
717.3789 820.606 716.0322 824.5137 715.5996 828.2402 c
714.2744 839.6641 716.7432 852.3052 714.6396 863.2803 c
714.1133 866.0288 711.7529 870.1323 710.3203 873.3604 c
708.8457 876.6797 707.0176 880.103 705.5195 883.4399 c
702.8916 889.2949 700.1807 899.8599 695.9199 903.1201 c
690.874 906.9814 675.5732 907.54 666.6396 906 c
663.1074 905.3911 658.6367 903.5625 655.1201 902.1602 c
649.3916 899.876 643.6367 895.5752 639.7598 892.5601 C
637.5732 880.4092 643.3994 869.6777 641.6797 858 C
611.4395 842.5786 578.7666 830.96 544.7197 818.6401 c
540.5566 817.1338 533.8184 812.7764 530.7998 812.8799 c
527.4668 812.9941 525.2939 816.9932 522.1602 817.2002 c
519.6924 817.3633 516.7363 815.2871 514 815.2803 c
511.4082 815.2734 509.6494 816.4775 507.7598 816.2402 c
500.292 815.3018 494.9004 806.3584 486.6396 803.7603 c
483.8203 802.873 480.1504 803.1943 478 801.8398 c
474.5137 799.6445 473.5811 794.0298 473.6797 788.8799 C
459.8193 784.8784 446.7012 780.458 433.8398 774.96 c
431.5781 773.9932 429.2998 772.9473 426.6396 773.04 C
424.625 768.9028 421.7861 765.3271 421.3604 760.5601 c
420.3154 748.8721 430.1914 734.9292 440.0801 734.1602 c
448.0703 733.5386 455.251 739.4307 460.7197 743.2803 c
467 747.7007 472.2402 752.3154 479.9199 753.8398 C
476.3027 743.1221 474.043 730.7832 468.4004 721.6802 c
465.8809 717.6167 461.8174 714.2754 458.7998 710.6401 c
451.8867 702.3105 449.0273 693.5391 444.4004 682.8003 c
442.7646 679.0044 439.3809 670.2476 437.2002 668.8799 c
433.4658 666.5391 426.9424 668.2607 424.2402 665.04 c
420.2559 660.292 422.1201 645.1689 421.8398 637.6802 c
421.4609 627.5713 421.1318 618.0723 421.3604 608.3999 C
426.5342 606.8545 433.2031 606.8027 438.1602 605.04 C
446.334 589.5469 445.6729 568.5537 453.04 554.1602 c
456.5977 547.21 463.0166 540.2803 468.4004 534 c
485.2734 514.3169 503.1953 496.397 501.5195 459.1201 C
500.0508 457.3896 496.8945 457.3452 495.7598 455.2803 C
499.4277 446.6499 498.2119 439.5767 501.5195 431.2803 c
504.9355 422.7144 515.7012 415.6318 513.04 403.9199 c
512.1152 399.8486 506.042 395.229 502.4805 390.96 c
500.8867 389.0503 498.8945 386.7358 497.2002 384.2402 c
495.4541 381.6689 494.0869 378.1123 492.4004 377.04 c
490.6641 375.936 487.7236 375.8984 485.6797 375.1201 c
477.2158 371.8979 467.5088 366.0801 471.7598 354 C
449.2051 345.9175 433.208 329.7773 410.7998 321.3604 c
403.4746 318.6084 395.313 314.6118 387.2798 313.6802 c
384.6792 313.3784 381.3101 314.2803 378.6401 313.6802 c
375.1821 312.9033 370.5596 308.4131 366.1602 305.52 c
361.7822 302.6411 356.9146 299.1694 353.2002 297.3604 c
337.0928 289.5146 320.4063 287.4736 312.3999 273.8398 C
306.812 274.0527 298.7041 271.9854 294.1602 274.3203 C
301.0771 277.8018 312.0098 278.4414 312.3999 286.3203 c
312.5859 290.0752 307.4277 295.5586 304.2402 295.9199 c
298.4829 296.5742 289.4971 290.5332 284.5601 287.7598 c
278.6392 284.4346 272.7539 278.7217 265.8398 278.1602 c
261.3931 277.7988 256.4883 279.7871 252.3999 280.0801 c
234.4761 281.3643 219.2915 277.2109 208.2402 272.4004 C
208.9648 268.0049 212.7866 266.707 213.52 262.3203 C
209.1514 262.0488 206.1719 260.3877 202 259.9199 C
198.459 267.8994 194.6074 275.5674 187.6001 280.0801 C
181.3589 273.3184 165.1348 272.543 161.2002 264.2402 c
156.6763 254.6943 162.5347 241.3701 160.2402 229.2002 C
141.4292 232.2676 115.7485 230.6406 92.5601 230.6396 c
73.231 230.6396 54.5273 229.0332 40.7202 224.4004 C
34.4341 211.3545 38.0332 193.6826 36.8799 177.8398 c
36.3003 169.873 34.3647 161.6563 34 153.3604 c
33.6021 144.3086 33.9731 135.3086 33.04 126.4805 c
31.2544 109.584 26.8975 92.5205 32.0801 77.04 C
56.6938 67.7334 87.7915 64.9121 119.4399 62.6396 C
121.2676 57.4063 133.4087 50.9727 132.8799 44.4004 c
132.5298 40.043 118.626 31.2246 115.1201 30.4805 c
108.5508 29.085 99.2275 30.4805 91.6001 30.4805 c
69.1826 30.4805 40.3984 31.8545 33.04 18.4805 c
28.229 9.73633 28.6973 -7.70508 28.2402 -19.9199 c
27.1421 -49.2373 26.2749 -78.0957 27.7603 -105.8398 c
28.498 -119.626 32.728 -131.8535 32.5601 -144.2402 c
32.4712 -150.791 30.1938 -157.2705 29.2002 -164.4004 c
26.2363 -185.665 26.3931 -208.6299 26.3198 -232.5596 C
34.6016 -245.1055 54.2153 -244.1113 66.6401 -253.2002 c
72.9014 -257.7803 76.3013 -266.2422 82.96 -269.5195 c
87.4868 -271.748 95.2935 -272.1035 102.6401 -273.3604 c
123.2095 -276.877 142.6611 -282.4541 163.1201 -283.9199 c
174.5693 -284.7402 186.3442 -283.1074 197.6802 -283.9199 c
207.6597 -284.6348 216.686 -285.8389 226 -285.8398 c
235.9731 -285.8408 245.1631 -284.6885 254.7998 -283.9199 c
274.1445 -282.3779 293.1069 -284.6953 309.52 -281.5195 c
316.4448 -280.1797 324.0703 -277.2725 331.1201 -274.7998 c
338.2192 -272.3096 345.3857 -269.8086 352.2402 -267.1201 c
371.042 -259.7451 393.3652 -250.9844 413.2002 -242.6396 c
419.9307 -239.8086 431.3779 -237.7842 432.4004 -233.04 c
433.2559 -229.0684 428.7686 -222.9639 427.1201 -219.1201 c
424.7959 -213.7002 423.0947 -209.1006 421.3604 -205.2002 c
417.6182 -196.7852 410.9893 -185.7549 411.2803 -175.9199 c
411.3848 -172.3652 413.4746 -169.4424 413.6797 -165.3604 c
413.9941 -159.1299 411.8076 -151.2715 410.7998 -143.7598 c
407.7646 -121.1406 406.583 -97.8105 404.0801 -75.5996 c
401.4932 -52.6406 396.4136 -33.542 394.48 -10.3203 c
393.8638 -2.91895 391.6167 4.34375 391.1201 11.2803 c
390.7905 15.8799 391.5713 19.71 390.6401 22.3203 c
387.4272 31.3213 370.168 33 358.96 34.7998 c
345.0894 37.0273 331.4297 37.79 325.3599 45.8398 C
329.4146 50.7451 332.7139 56.4063 337.3599 60.7197 C
358.4019 60.8467 373.6016 69.6143 391.6001 73.2002 c
397.897 74.4541 405.2803 74.7441 409.3604 78 c
416.7422 83.8926 418.4033 107.5791 419.4404 121.6797 c
420.7334 139.2637 420.5186 158.3262 421.3604 173.5205 c
421.7217 180.0557 422.4141 187.8672 421.8398 193.2002 c
420.8701 202.2148 413.8721 210.6016 413.6797 220.0801 C
385.2607 226.7178 349.5703 224.4004 315.7598 224.4004 c
281.3936 224.4004 246.3159 224.4004 213.52 224.4004 C
210.7192 229.5752 211.8237 237.8643 214 243.1201 C
216.0073 243.3525 217.7256 243.875 219.2798 244.5605 C
228.2666 239.5547 237.1626 235.0527 247.6001 239.7598 c
252.3276 241.8926 258.2705 250.1182 263.4399 251.2803 c
269.665 252.6787 279.5791 250.1377 286.96 250.3203 c
294.1094 250.4971 302.4858 253.3906 309.52 252.2402 c
318.2358 250.8135 326.4307 234.8809 338.3198 243.1201 C
341.2588 237.9521 348.6533 238.7324 350.7998 242.6396 C
353.3857 231.2246 371.6519 239.9336 373.3599 246.4805 C
385.5386 244.2559 401.0967 248.0723 412.2402 245.04 c
415.7285 244.0908 417.3906 240.8398 421.3604 241.2002 c
429.8105 241.9668 432.7676 259.3818 425.2002 262.7998 c
420.2998 265.0137 410.168 263.2803 403.5996 263.2803 c
395.731 263.2803 389.3867 262.876 382 263.7598 C
403.9248 286.3584 461.6826 270.4316 493.3604 283.4404 c
497.7842 285.2568 502.4971 288.583 507.2803 291.1201 c
511.3682 293.2881 519.3672 297.4287 524.0801 296.4004 c
527.0283 295.7568 527.5967 292.2959 531.7598 291.1201 c
535.2412 290.1367 538.4805 291.7109 540.8799 289.2002 C
537.2715 277.4443 536.2217 263.8125 531.2803 251.7598 c
528.7305 245.542 524.4043 239.332 520.7197 233.04 c
509.6426 214.123 498.8213 194.9531 489.5195 174.96 c
480.166 154.8545 472.4063 132.1016 465.04 110.1602 c
462.5342 102.6973 458.751 94.8477 457.8398 87.5996 c
457.499 84.8838 458.0879 82.1689 457.8398 79.4404 c
457.1016 71.2998 455.3535 63.459 454.4805 55.4404 c
453.6094 47.4482 451.3486 40.0361 450.1602 32.4004 c
449.7422 29.7148 450.3145 26.5508 449.6797 23.2803 c
448.2568 15.9424 445.3652 6.12305 442.4805 -2.63965 c
439.6797 -11.1475 434.3223 -18.3877 433.8398 -27.1201 c
433.3271 -36.4043 439.6123 -38.0127 441.04 -44.8799 c
441.5811 -47.4824 440.9551 -50.3076 441.5195 -53.04 c
443.6025 -63.1045 448.6006 -73.6133 452.0801 -83.7598 c
454.0107 -89.3887 454.3887 -95.3564 455.4404 -101.04 c
456.3516 -105.9707 456.959 -112.2988 461.6797 -115.4395 C
469.4414 -102.0801 481.668 -91.5928 490 -75.1201 c
493.418 -68.3623 496.7031 -59.8652 500.5596 -51.5996 c
503.876 -44.4951 507.8613 -33.9834 513.5195 -30 c
517.0723 -27.499 522.6943 -27.0771 527.4404 -25.2002 c
530.3545 -24.0469 531.7988 -21.7559 534.6396 -21.3604 C
537.3135 -28.0264 533.9902 -34.96 534.6396 -41.5195 c
535.2461 -47.6367 538.0605 -53.9473 539.4404 -59.7598 c
540.9434 -66.0938 542.1436 -72.1113 545.2002 -77.04 C
536.5371 -80.6963 540.1748 -98.5254 538 -107.7598 c
536.1133 -115.7695 532.9238 -126.0547 530.3203 -136.0801 c
527.7822 -145.8486 525.2998 -156.7725 520.7197 -162.4795 c
518.8682 -164.7881 515.374 -165.5859 512.5596 -167.7598 c
509.9209 -169.7988 508.3496 -173.1934 505.8398 -174.4795 c
496.1611 -179.4414 481.9121 -178.124 466.4805 -179.7598 C
460.9775 -182.8525 458.1113 -187.1055 461.2002 -194.1602 c
463.666 -199.793 470.8975 -204.8809 477.04 -210 c
484.248 -216.0068 492.4121 -221.7158 503.9199 -221.5195 c
520.1436 -221.2441 532.1094 -219.0293 544.2402 -216.2402 C
544.6436 -219.1963 545.1445 -222.0557 545.2002 -225.3604 C
558.6807 -233.0166 576.4209 -228.3018 586.96 -218.6396 c
590.4971 -215.3975 601.2041 -203.2412 601.3604 -198 c
601.5166 -192.7393 595.7393 -190.1191 594.1602 -185.5195 C
598.7148 -181.4355 604.3193 -178.3994 609.5195 -174.96 C
613.0693 -163.8076 611.6914 -152.9316 615.7598 -141.8398 c
617.7441 -136.4297 625.0635 -131.4238 625.8398 -126 c
626.6826 -120.1113 624.9053 -112.3584 624.4004 -105.8398 c
623.8779 -99.0938 624.0928 -92.5332 622 -86.6396 C
630.1504 -78.998 628.0625 -67.2764 631.5996 -54.4795 c
637.5811 -32.8457 644.332 -9.94434 647.9199 13.2002 C
658.374 15.0664 668.5195 17.2402 678.1602 19.9199 C
680.2656 25.8145 681.2715 32.8086 681.04 41.04 C
694.5635 26.7236 699.6445 3.96484 707.4404 -16.0801 C
720.5322 -23.6279 728.8906 -35.9092 742 -43.4395 C
740.5254 -56.3398 748.3965 -60.3467 752.0801 -68.3994 c
755.5889 -76.0723 755.5508 -85.252 758.7998 -93.3604 c
763.5889 -105.3096 772.0352 -113.9248 775.5996 -124.5596 C
771.4551 -129.6465 756.0713 -134.415 756.8799 -143.2803 c
757.2461 -147.2969 765.5391 -153.9277 769.3604 -156.2402 c
776.9453 -160.8301 788.002 -161.0371 798.6396 -161.04 C
800.6377 -162.5625 800.2529 -166.4668 801.04 -169.2002 C
821.1846 -174.9971 843.667 -168.5244 841.8398 -147.5996 c
841.0732 -138.8145 836.958 -129.6777 833.6797 -122.1602 C
834.6152 -118.8799 837.209 -119.0059 837.5195 -115.9199 c
837.9063 -112.0879 833.3145 -108.4551 833.6797 -103.9199 C
834.2139 -101.4141 838.2568 -102.417 839.4404 -100.5596 C
838.3467 -81.2754 826.8047 -64.5371 822.6396 -47.7598 c
811.998 -4.88965 784.0146 24.1514 770.3203 63.1201 c
766.0137 75.373 768.2227 88.7334 765.5195 104.8799 c
763.626 116.1953 757.1357 127.6875 753.5195 139.4404 c
749.7324 151.748 745.4229 163.3477 740.5596 173.5205 C
743.4678 175.5215 748.8945 176.1279 750.1602 179.7598 c
f
*U
U
U
LB
%AI5_EndLayer--
%AI3_BeginCrops
userdict /AI3_noCropMarks known not {
0 A
u
u
0 D
0 R
0 G
0 J 0 j 0.5 w 4 M []0 d0 XR
-191.48 -400.0801 m
-218.48 -400.0801 L
S
-182.48 -409.0801 m
-182.48 -436.0801 L
S
U
u
-191.48 1000.0801 m
-218.48 1000.0801 L
S
-182.48 1009.0801 m
-182.48 1036.0801 L
S
U
u
991.4805 1000.0801 m
1018.4805 1000.0801 L
S
982.4805 1009.0801 m
982.4805 1036.0801 L
S
U
u
991.4805 -400.0801 m
1018.4805 -400.0801 L
S
982.4805 -409.0801 m
982.4805 -436.0801 L
S
U
U
} if
%AI3_EndCrops
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
